// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TestDB;

#nullable disable

namespace TestDB.Migrations
{
    [DbContext(typeof(TestContext))]
    [Migration("20221215160526_InitDB")]
    partial class InitDB
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("TestDB.Cliente", b =>
                {
                    b.Property<Guid>("ClienteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Activo")
                        .HasColumnType("bit");

                    b.Property<string>("ApellidoMaterno")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ApellidoPaterno")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaNacimiento")
                        .HasColumnType("datetime2");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Rfc")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ClienteId");

                    b.ToTable("Cliente", (string)null);
                });

            modelBuilder.Entity("TestDB.CuentaCliente", b =>
                {
                    b.Property<Guid>("CuentaClienteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Activo")
                        .HasColumnType("bit");

                    b.Property<string>("Clabe")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ClienteId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("NumeroCuenta")
                        .HasColumnType("int");

                    b.HasKey("CuentaClienteId");

                    b.HasIndex("ClienteId");

                    b.ToTable("CuentaCliente", (string)null);
                });

            modelBuilder.Entity("TestDB.Tarjeta", b =>
                {
                    b.Property<Guid>("TarjetaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Activo")
                        .HasColumnType("bit");

                    b.Property<int>("AnualidaVigencia")
                        .HasColumnType("int");

                    b.Property<Guid>("CuentaClienteId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("EstatusTarjeta")
                        .HasColumnType("int");

                    b.Property<int>("MesVigencia")
                        .HasColumnType("int");

                    b.Property<string>("NumeroTarjeta")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TipoTarjeta")
                        .HasColumnType("int");

                    b.HasKey("TarjetaId");

                    b.HasIndex("CuentaClienteId");

                    b.ToTable("Tarjeta", (string)null);
                });

            modelBuilder.Entity("TestDB.TarjetaPrestamo", b =>
                {
                    b.Property<Guid>("PrestamoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("EstatusPrestamo")
                        .HasColumnType("int");

                    b.Property<DateTime>("FechaLiquidar")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaPago")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("MontoPrestado")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("TarjetaId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("PrestamoId");

                    b.HasIndex("TarjetaId");

                    b.ToTable("TarjetaPrestamo", (string)null);
                });

            modelBuilder.Entity("TestDB.TransaccionPago", b =>
                {
                    b.Property<Guid>("TransaccionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("EstatusTarjeta")
                        .HasColumnType("int");

                    b.Property<DateTime>("FechaPago")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Monto")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Referencia")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("TarjetaId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("TransaccionId");

                    b.HasIndex("TarjetaId");

                    b.ToTable("TransaccionPago", (string)null);
                });

            modelBuilder.Entity("TestDB.CuentaCliente", b =>
                {
                    b.HasOne("TestDB.Cliente", "Cliente")
                        .WithMany()
                        .HasForeignKey("ClienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cliente");
                });

            modelBuilder.Entity("TestDB.Tarjeta", b =>
                {
                    b.HasOne("TestDB.CuentaCliente", "CuentaCliente")
                        .WithMany()
                        .HasForeignKey("CuentaClienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CuentaCliente");
                });

            modelBuilder.Entity("TestDB.TarjetaPrestamo", b =>
                {
                    b.HasOne("TestDB.Tarjeta", "Tarjeta")
                        .WithMany()
                        .HasForeignKey("TarjetaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tarjeta");
                });

            modelBuilder.Entity("TestDB.TransaccionPago", b =>
                {
                    b.HasOne("TestDB.Tarjeta", "Tarjeta")
                        .WithMany()
                        .HasForeignKey("TarjetaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tarjeta");
                });
#pragma warning restore 612, 618
        }
    }
}
